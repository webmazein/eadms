// // src/redux/DefectsSlice.js
// import { createSlice } from '@reduxjs/toolkit'

// const initialState = {
//   defects: [],
// }

// const defectsSlice = createSlice({
//   name: 'defects',
//   initialState,
//   reducers: {
//     setDefects: (state, action) => {
//       state.defects = action.payload
//     },
//     clearDefects: (state) => {
//       state.defects = []
//     },
//   },
// })

// // Export the actions generated by createSlice
// export const { setDefects, clearDefects } = defectsSlice.actions

// // Selector function to filter defects by screen_no
// export const selectDefectsByScreenNo = (state, screenNo) => {
//   if (!screenNo) {
//     return state.defects.defects || []
//   }

// console.log(state.defects.defects, "Defects 1")
//   const defects =
//     screenNo && state.defects.defects
//       ? state.defects.defects.filter((defect) => defect.screen_no === screenNo)
//       : state.defects.defects ? state.defects.defects : []

//       const defectMap = new Map()

//       console.log(defects, "defect 1")
//   defects.forEach((defect) => {
//     if (defectMap.has(defect.defect_name)) {
//       const existingDefect = defectMap.get(defect.defect_name)
//       existingDefect.count += 1,
//       existingDefect.updated_at = new Date()
//     } else {
//       defectMap.set(defect.defect_name, {
//         ...defect,
//         count: defect.count || 1,
//         updated_at: defect.updated_at || new Date(),
//       })
//     }
//   })

//   console.log(state.defects.defects, 'Defects 2')

//   return Array.from(defectMap.values())
//   // return state.defects.defects.filter((defect) => defect.screen_no === screenNo)
// }

// // Export the reducer generated by createSlice
// export default defectsSlice.reducer



// src/redux/DefectsSlice.js
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  defects: [],
};

const defectsSlice = createSlice({
  name: 'defects',
  initialState,
  reducers: {
    setDefects: (state, action) => {
      state.defects = action.payload;
    },
    clearDefects: (state) => {
      state.defects = [];
    },
  },
});

// Export the actions generated by createSlice
export const { setDefects, clearDefects } = defectsSlice.actions;

// Selector function to filter defects by screen_no
export const selectDefectsByScreenNo = (state, screenNo) => {
  const defects = state.defects.defects || [];

  if (!screenNo) {
    return defects;
  }

  const filteredDefects = defects.filter(defect => defect.screen_no === screenNo);

  const defectMap = new Map();

  filteredDefects.forEach(defect => {
    if (defectMap.has(defect.defect_name)) {
      const existingDefect = defectMap.get(defect.defect_name);
      existingDefect.count += 1;
      existingDefect.updated_at = new Date();
    } else {
      defectMap.set(defect.defect_name, {
        ...defect,
        count: defect.count || 1,
        updated_at: defect.updated_at || new Date(),
      });
    }
  });

  return Array.from(defectMap.values());
};

// Export the reducer generated by createSlice
export default defectsSlice.reducer;
